<?xml version="1.0" encoding="utf-8"?>
<project name="FlickrDownloadr" default="unitTestsOnly">

  <property name="project.name" value="FlickrDownloadr" />
  <property name="project.build.type" value="Release" />

  <!-- Folder references -->
  <property name="working.dir" value="${path::get-full-path('..')}"/>
  <property name="build.tools.dir" value="${working.dir}\build-tools" />
  <property name="source.directory" value="${working.dir}\source" />
  <property name="bin.dir" value="${working.dir}\source\bin\${project.build.type}" />
  <property name="nunit.results.dir" value="${working.dir}\source\bin\NUnit" />

  <!-- Compilation settings -->
  <property name="flickrdownloadr.solution" value="FloydPink.Flickr.Downloadr.sln"/>
  <property name="flickrdownloadr.app.project" value="FloydPink.Flickr.Downloadr.UI\FloydPink.Flickr.Downloadr.UI.csproj"/>
  <property name="common.assembly.info" value="${source.directory}\CommonAssemblyInfo.cs" />

  <!-- Test references -->
  <property name="nunit.dir" value="${build.tools.dir}\nunit\NUnit-2.6.3\bin" dynamic="true" />
  <property name="unittests.assembly" value="${bin.dir}\FloydPink.Flickr.Downloadr.UnitTests.exe" />
  <property name="boundarycrossingtests.assembly" value="${bin.dir}\FloydPink.Flickr.Downloadr.BoundaryCrossingTests.exe" />

  <loadtasks assembly="${build.tools.dir}\nant\nantcontrib-0.92\bin\NAnt.Contrib.Tasks.dll" />
  <!-- Common Targets -->
  <include buildfile="./common.build"/>

  <!-- Build Targets -->
  <target name="appveyor" depends="install, unitTestsOnly, createrelease"/>
  <target name="unitTestsOnly" depends="compilesolution, unitTests"/>
  <target name="allTests" depends="compilesolution, unitTests, boundarycrossingTests"/>
  <target name="createrelease" depends="createrelease-win, createrelease-mac">
  
  <target name="cleanBin" unless="${target::has-executed('cleanBin')}">
    <echo message="Clean bin directory" />
    <delete dir="${bin.dir}" failonerror="false"  if="${directory::exists(bin.dir)}"/>
  </target>

  <target name="createBin" unless="${target::has-executed('createBin')}">
    <echo message="Create bin directory" />
    <mkdir dir="${bin.dir}" failonerror="true" unless="${directory::exists(bin.dir)}"/>
    <mkdir dir="${nunit.results.dir}" failonerror="true" unless="${directory::exists(nunit.results.dir)}"/>
  </target>

  <target name="install">
    <echo message="Installing GTK# and BitRock Installer..." />
    <exec program="powershell" workingdir="${build.tools.dir}" verbose="true">
        <arg value="-noprofile"/>
        <arg value="-nologo"/>
        <arg value="-noninteractive"/>
        <arg value="-command"/>
        <arg value=".\install.ps1"/>
    </exec>
  </target>

  <target name="createrelease-win" depends="unitTestsOnly">
    <echo message="Creating the release..." />
    <exec program="powershell" workingdir="${build.tools.dir}" verbose="true">
        <arg value="-noprofile"/>
        <arg value="-nologo"/>
        <arg value="-noninteractive"/>
        <arg value="-command"/>
        <arg value=".\create-release-win.ps1"/>
    </exec>
  </target>

  <target name="createrelease-win" depends="createmacappbundle">
  	<echo message="Need to now create the shell file" />
  	<move tofile="../dist/mac/flickrdownlodr.app">
		<fileset basedir="flickrdownlodr.app"/>
	</move>
  </target>
  
  <target name="restorenugetpackages">
    <echo message="Downloading NuGet and restoring packages..." />
    <exec program="powershell" workingdir="${build.tools.dir}" verbose="true">
        <arg value="-noprofile"/>
        <arg value="-nologo"/>
        <arg value="-noninteractive"/>
        <arg value="-command"/>
        <arg value=".\downloadNuget.ps1"/>
    </exec>
  </target>

  <target name="compilesolution" depends="cleanBin, createBin, increment-version, restorenugetpackages">
    <echo message="Compiling Solution:" />

    <exec program="msbuild.exe"  basedir="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319"
			  commandline='"${source.directory}\${flickrdownloadr.solution}" /p:Platform="Any CPU" /p:Configuration=${project.build.type} /t:Rebuild /v:m /m' workingdir="." />
  </target>

  <target name="unitTests">
    <echo message="Running FloydPink.Flickr.Downloadr.UnitTests..." />
    <property name="nunittest.testassemblypath" value="${unittests.assembly}" dynamic="true" />
    <call target="nunittest" />
  </target>

  <target name="boundarycrossingTests">
    <echo message="Running FloydPink.Flickr.Downloadr.BoundaryCrossingTests..." />
    <property name="nunittest.testassemblypath" value="${boundarycrossingtests.assembly}" dynamic="true" />
    <call target="nunittest" />
  </target>

  <target name="nunittest">
    <property name="nunittest.output.file.name" value="${path::get-file-name-without-extension(nunittest.testassemblypath)}.xml"/>
    <exec program="${nunit.dir}\nunit-console.exe">
      <arg value="&quot;${nunittest.testassemblypath}&quot; /xml=&quot;${nunit.results.dir}\${nunittest.output.file.name}&quot;"/>
    </exec>
  </target>

  <target name="increment-version">
    <echo message="Incrementing the version:" />
    <version buildtype="NoIncrement" revisiontype="Increment" startdate="2012-04-02" verbose="true"/>
    <call target="create-common-assemblyinfo" />
  </target>

</project>
